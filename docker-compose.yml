services:
  api:
    build:
      context: ./endpoints
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./endpoints:/app
    networks:
      - logly-network
    restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - logly-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "request-logs:1:1,error-logs:1:1,response-logs:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - logly-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=logly-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - logly-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - logly-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: logly
      POSTGRES_PASSWORD: logly_password
      POSTGRES_DB: logly_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - logly-network

  log-processor:
    build:
      context: ./log-processor
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres
    networks:
      - logly-network
    restart: unless-stopped

networks:
  logly-network:
    driver: bridge

volumes:
  postgres-data:
  grafana-data: